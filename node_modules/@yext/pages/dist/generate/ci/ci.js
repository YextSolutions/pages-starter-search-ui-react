import path from "path";
import { Path } from "../../common/src/project/path.js";
import { ProjectStructure } from "../../common/src/project/structure.js";
import fs from "node:fs";
import colors from "picocolors";
import { loadFunctions } from "../../common/src/function/internal/loader.js";
const handler = async ({ scope }) => {
  const projectStructure = await ProjectStructure.init({ scope });
  const ciPath = new Path(
    path.join(
      projectStructure.getSitesConfigPath().path,
      projectStructure.config.sitesConfigFiles.ci
    )
  );
  updateCiConfig(ciPath.getAbsolutePath(), true, projectStructure);
};
const ciCommand = (program) => {
  program.command("ci").description("Generates ci.json file").option(
    "--scope <string>",
    "The subfolder to scope the served templates from"
  ).action(handler);
};
const updateCiConfig = async (ciConfigPath, calledViaCommand, projectStructure) => {
  const ciDir = path.dirname(ciConfigPath);
  if (!fs.existsSync(ciDir)) {
    fs.mkdirSync(ciDir);
  }
  let originalCiConfigJson = {};
  if (fs.existsSync(ciConfigPath)) {
    originalCiConfigJson = JSON.parse(fs.readFileSync(ciConfigPath).toString());
  } else {
    if (calledViaCommand) {
      console.error(colors.red(`${ciConfigPath} is missing`));
      return;
    } else {
      throw new Error(`${ciConfigPath} is missing`);
    }
  }
  const updatedCiConfigJson = await getUpdatedCiConfig(
    originalCiConfigJson,
    projectStructure
  );
  if (updatedCiConfigJson) {
    fs.writeFileSync(
      ciConfigPath,
      JSON.stringify(updatedCiConfigJson, null, "  ")
    );
  }
};
const getUpdatedCiConfig = async (ciConfig, projectStructure) => {
  const ciConfigCopy = structuredClone(ciConfig);
  ciConfigCopy.artifactStructure.assets = [];
  ciConfigCopy.artifactStructure.assets.push({
    root: projectStructure.config.rootFolders.dist,
    pattern: `${projectStructure.config.subfolders.assets}/**/*`
  });
  ciConfigCopy.artifactStructure.assets.push({
    root: `${projectStructure.config.rootFolders.dist}/public_assets`,
    pattern: "**/*"
  });
  ciConfigCopy.artifactStructure.plugins = [];
  const generatorPluginIndex = ciConfigCopy.artifactStructure.plugins.findIndex(
    (plugin) => {
      return plugin.event === "ON_PAGE_GENERATE";
    }
  );
  const generatorPlugin = getGeneratorPlugin(projectStructure);
  if (generatorPluginIndex !== -1) {
    ciConfigCopy.artifactStructure.plugins[generatorPluginIndex] = generatorPlugin;
  } else {
    ciConfigCopy.artifactStructure.plugins.push(generatorPlugin);
  }
  const { rootFolders, subfolders } = projectStructure.config;
  const functionModules = await loadFunctions(
    path.join(rootFolders.source, subfolders.serverlessFunctions),
    projectStructure
  );
  functionModules.forEach((functionModule) => {
    const newEntry = {
      pluginName: functionModule.config.name,
      event: functionModule.config.event,
      functionName: functionModule.config.functionName,
      apiPath: functionModule.config.event === "API" ? functionModule.slug.production : void 0,
      sourceFiles: [
        {
          root: path.join(
            rootFolders.dist,
            subfolders.serverlessFunctions,
            functionModule.config.name
          ),
          pattern: "*{.js,.ts}"
        }
      ]
    };
    if (ciConfigCopy.artifactStructure.plugins) {
      const functionPluginIndex = ciConfigCopy.artifactStructure.plugins.findIndex((plugin) => {
        return plugin.pluginName === functionModule.config.name;
      });
      if (functionPluginIndex !== -1) {
        ciConfigCopy.artifactStructure.plugins[functionPluginIndex] = newEntry;
      } else {
        ciConfigCopy.artifactStructure.plugins?.push(newEntry);
      }
    }
  });
  return ciConfigCopy;
};
const getGeneratorPlugin = (projectStructure) => {
  const { rootFolders, subfolders } = projectStructure.config;
  const {
    assets,
    renderer,
    clientBundle,
    serverBundle,
    static: _static,
    renderBundle,
    plugin
  } = subfolders;
  return {
    pluginName: "PagesGenerator",
    sourceFiles: [
      {
        root: `${rootFolders.dist}/${plugin}`,
        pattern: "*{.ts,.json}"
      },
      {
        root: `${rootFolders.dist}`,
        pattern: `${assets}/{${serverBundle},${_static},${renderer},${renderBundle},${clientBundle}}/**/*{.js,.css}`
      }
    ],
    event: "ON_PAGE_GENERATE",
    functionName: "PagesGenerator"
  };
};
export {
  ciCommand,
  getUpdatedCiConfig,
  updateCiConfig
};
