import path from "path";
import fs from "node:fs";
import { loadFunctions } from "../../common/src/function/internal/loader.js";
const createArtifactsJson = async (artifactPath, projectStructure) => {
  const artifactsDir = path.dirname(artifactPath);
  if (!fs.existsSync(artifactsDir)) {
    fs.mkdirSync(artifactsDir, { recursive: true });
  }
  const artifactsConfig = await getArtifactsConfig(projectStructure);
  fs.writeFileSync(artifactPath, JSON.stringify(artifactsConfig, null, "  "));
};
const getArtifactsConfig = async (projectStructure) => {
  const artifactConfig = {
    artifactStructure: {
      assets: [
        // assets from the plugin
        {
          root: projectStructure.config.rootFolders.dist,
          pattern: `${projectStructure.config.subfolders.assets}/**/*`
        },
        // static assets based on the Vite publicDir
        {
          root: `${projectStructure.config.rootFolders.dist}/public_assets`,
          pattern: "**/*"
        }
      ],
      plugins: [getGeneratorPlugin(projectStructure)]
    }
  };
  const { rootFolders, subfolders } = projectStructure.config;
  const functionModules = await loadFunctions(
    path.join(rootFolders.source, subfolders.serverlessFunctions),
    projectStructure
  );
  functionModules.forEach((functionModule) => {
    const newEntry = {
      pluginName: functionModule.config.name,
      event: functionModule.config.event,
      functionName: functionModule.config.functionName,
      apiPath: functionModule.config.event === "API" ? functionModule.slug.production : void 0,
      sourceFiles: [
        {
          root: path.join(
            rootFolders.dist,
            subfolders.serverlessFunctions,
            functionModule.config.name
          ),
          pattern: "*{.js,.ts}"
        }
      ]
    };
    if (artifactConfig.artifactStructure.plugins) {
      const functionPluginIndex = artifactConfig.artifactStructure.plugins.findIndex((plugin) => {
        return plugin.pluginName === functionModule.config.name;
      });
      if (functionPluginIndex !== -1) {
        artifactConfig.artifactStructure.plugins[functionPluginIndex] = newEntry;
      } else {
        artifactConfig.artifactStructure.plugins?.push(newEntry);
      }
    }
  });
  return artifactConfig;
};
const getGeneratorPlugin = (projectStructure) => {
  const { rootFolders, subfolders } = projectStructure.config;
  const {
    assets,
    renderer,
    clientBundle,
    serverBundle,
    static: _static,
    renderBundle,
    plugin
  } = subfolders;
  return {
    pluginName: "PagesGenerator",
    sourceFiles: [
      {
        root: `${rootFolders.dist}/${plugin}`,
        pattern: "*{.ts,.json}"
      },
      {
        root: `${rootFolders.dist}`,
        pattern: `${assets}/{${serverBundle},${_static},${renderer},${renderBundle},${clientBundle}}/**/*{.js,.css}`
      }
    ],
    event: "ON_PAGE_GENERATE",
    functionName: "PagesGenerator"
  };
};
export {
  createArtifactsJson,
  getArtifactsConfig
};
