import fs from "fs-extra";
import isEqual from "lodash/isEqual.js";
import path from "path";
import {
  convertTemplateConfigToFeatureConfig
} from "../../common/src/feature/features.js";
import {
  convertTemplateConfigToStreamConfig
} from "../../common/src/feature/stream.js";
import {
  loadTemplateModules
} from "../../common/src/template/loader/loader.js";
const createTemplatesJson = async (templateFilepaths, projectStructure, type) => {
  const templateModules = await loadTemplateModules(
    templateFilepaths,
    true,
    false,
    projectStructure
  );
  return createTemplatesJsonFromModule(templateModules, projectStructure, type);
};
const createTemplatesJsonFromModule = async (templateModules, projectStructure, type) => {
  const { features, streams } = getTemplatesConfig(templateModules);
  let templatesAbsolutePath;
  switch (type) {
    case "FEATURES":
      templatesAbsolutePath = path.resolve(
        projectStructure.getSitesConfigPath().path,
        projectStructure.config.sitesConfigFiles.features
      );
      break;
    case "TEMPLATES":
      templatesAbsolutePath = path.resolve(
        projectStructure.getScopedDistPath().path,
        projectStructure.config.distConfigFiles.templates
      );
      break;
  }
  const templatesDir = path.dirname(templatesAbsolutePath);
  if (!fs.existsSync(templatesDir)) {
    fs.mkdirSync(templatesDir, { recursive: true });
  }
  let templatesJson;
  switch (type) {
    case "FEATURES":
      templatesJson = mergeFeatureJson(
        templatesAbsolutePath,
        features,
        streams
      );
      break;
    case "TEMPLATES":
      templatesJson = { features, streams };
      break;
  }
  fs.writeFileSync(
    templatesAbsolutePath,
    JSON.stringify(templatesJson, null, "  ")
  );
};
const getTemplatesConfig = (templateModules) => {
  const features = [];
  const streams = [];
  for (const module of templateModules.values()) {
    const featureConfig = convertTemplateConfigToFeatureConfig(module.config);
    features.push(featureConfig);
    const streamConfig = convertTemplateConfigToStreamConfig(module.config);
    if (streamConfig) {
      pushStreamConfigIfValid(streams, streamConfig);
    }
  }
  return { features, streams };
};
const mergeFeatureJson = (featurePath, features, streams) => {
  let originalFeaturesJson = {};
  if (fs.existsSync(featurePath)) {
    originalFeaturesJson = JSON.parse(fs.readFileSync(featurePath).toString());
  }
  return {
    ...originalFeaturesJson,
    features,
    streams
  };
};
const pushStreamConfigIfValid = (streams, streamConfig) => {
  const matchingStreamConfig = streams.find(
    (stream) => stream.$id === streamConfig.$id
  );
  if (!matchingStreamConfig) {
    streams.push(streamConfig);
    return;
  }
  if (isEqual(matchingStreamConfig, streamConfig)) {
    return;
  }
  throw `Conflicting configurations found for stream ID: ${streamConfig.$id}`;
};
export {
  createTemplatesJson,
  createTemplatesJsonFromModule,
  getTemplatesConfig,
  mergeFeatureJson,
  pushStreamConfigIfValid
};
