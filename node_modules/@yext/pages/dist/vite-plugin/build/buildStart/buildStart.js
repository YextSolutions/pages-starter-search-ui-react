import path, { parse } from "node:path";
import { glob } from "glob";
import logger from "../../log.js";
import fs from "fs";
import { fileURLToPath } from "url";
import { Path } from "../../../common/src/project/path.js";
import { convertToPosixPath } from "../../../common/src/template/paths.js";
import { getGlobalClientServerRenderTemplates } from "../../../common/src/template/internal/getTemplateFilepaths.js";
import { readdir } from "fs/promises";
var buildStart_default = (projectStructure) => {
  return async function(inputOptions) {
    inputOptions.input = await discoverInputs(
      projectStructure.getTemplatePaths(),
      projectStructure
    );
    console.log(yextBanner);
    clean(new Path(projectStructure.config.rootFolders.dist).getAbsolutePath());
    copyPluginFiles(this.emitFile);
    await injectRenderer(this.emitFile, projectStructure);
  };
};
const clean = (yextDir) => {
  const finisher = logger.timedLog({
    startLog: "Cleaning build artifacts"
  });
  try {
    fs.rmSync(yextDir, { recursive: true });
    finisher.succeed("Finished cleaning");
  } catch (e) {
    finisher.fail("Nothing to clean");
  }
};
const copyPluginFiles = (fileEmitter) => {
  const finisher = logger.timedLog({
    startLog: "Copying Yext plugin files"
  });
  const currentPath = fileURLToPath(import.meta.url);
  const pathToPluginsDir = path.resolve(
    currentPath,
    path.join("..", "..", "..", "..", "plugin")
  );
  const pluginFiles = glob.sync(convertToPosixPath(`${pathToPluginsDir}/*.ts`)).map((f) => path.resolve(f));
  if (pluginFiles.length == 0) {
    finisher.fail("Failed to copy Yext plugin files");
    return;
  }
  pluginFiles.forEach((filepath) => {
    const filename = path.posix.join("plugin", path.basename(filepath));
    fileEmitter({
      type: "asset",
      fileName: filename,
      source: fs.readFileSync(filepath).toString()
    });
  });
  finisher.succeed("Successfully copied Yext plugin files");
};
const injectRenderer = async (fileEmitter, projectStructure) => {
  const finisher = logger.timedLog({
    startLog: "Injecting template renderer."
  });
  const currentDir = fileURLToPath(new URL(".", import.meta.url));
  fileEmitter({
    type: "chunk",
    id: path.join(currentDir, "rendering", "renderer.js"),
    fileName: `${projectStructure.config.subfolders.assets}/${projectStructure.config.subfolders.renderer}/templateRenderer.js`
  });
  finisher.succeed("Injected template renderer.");
};
const yextBanner = `
                  :=*#%@@@@@%#+-:
             :=#@@%*+==-----=+*#%@%*-.
          :*@%*-.                 :=*@%+.
       .=%@+:                         -#@#=
      +@@=                              .+@%-
    -@%-                                   +@#
   =@#.       :-       =:    :=+==:         :%@:
  =@*         +@#-   :%@=  =@%+==*@@:        .@%.
  @@.          :@@* +@%   :@%   *@@=          :@%
 #@-             =@@@+    +@- =%@*.:+:         *@-
=@#               =@+     .@@%@=  :@%.         -@*
%@+               -@+      .*@@#%@%+.           @%
@@=                                             @@
@@+           #@+.    +@+ :%%%%@@%%%%=          @@
+@*            -%@*:+@#:       %@.             :@#
 @@.             :@@@=         %@.             +@=
 -@#            *@@=%@+        %@.             @@.
  *@-         =%@*.  +@%-      %@.            #@-
   %@-        -=       +:      ==            *@=
    *@*                                    :%@-
     -%@+.                               :*@#.
       =#@*:                           -#@#:
         :*@%+:                     -*@%=
            -+%@#*=-:.       .:-+*%@#=.
                :-+*#%@@@@@@@%#*=-.

      Built with the Yext SSG Plugin
`;
const discoverInputs = async (templatePaths, projectStructure) => {
  const entryPoints = {};
  const updateEntryPoints = async (dir) => (await readdir(dir, { withFileTypes: true })).filter((dirent) => !dirent.isDirectory()).map((file) => file.name).filter(
    (f) => f !== "_client17.tsx" && f !== "_client.tsx" && f !== "_server.tsx"
  ).forEach((template) => {
    const parsedPath = parse(template);
    const bundlePath = template.includes(".client") ? projectStructure.config.subfolders.clientBundle : projectStructure.config.subfolders.serverBundle;
    const outputPath = `${bundlePath}/${parsedPath.name.replace(
      ".client",
      ""
    )}`;
    if (entryPoints[outputPath]) {
      return;
    }
    entryPoints[outputPath] = path.join(dir, template);
  });
  for (const templatePath of templatePaths) {
    await updateEntryPoints(templatePath.getAbsolutePath());
  }
  return { ...entryPoints, ...discoverRenderTemplates(projectStructure) };
};
const discoverRenderTemplates = (projectStructure) => {
  const entryPoints = {};
  const clientServerRenderTemplates = getGlobalClientServerRenderTemplates(
    projectStructure.getTemplatePaths()
  );
  const { renderBundle } = projectStructure.config.subfolders;
  entryPoints[`${renderBundle}/_server`] = clientServerRenderTemplates.serverRenderTemplatePath;
  entryPoints[`${renderBundle}/_client`] = clientServerRenderTemplates.clientRenderTemplatePath;
  return entryPoints;
};
export {
  buildStart_default as default
};
