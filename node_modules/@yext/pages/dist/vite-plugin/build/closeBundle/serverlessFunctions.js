import { glob } from "glob";
import path from "path";
import esbuild from "esbuild";
import { processEnvVariables } from "../../../util/processEnvVariables.js";
import { FunctionMetadataParser } from "../../../common/src/function/internal/functionMetadataParser.js";
import fs from "fs";
import { convertToPosixPath } from "../../../common/src/template/paths.js";
import { COMMON_ESBUILD_LOADERS } from "../../../common/src/loader/esbuild.js";
const bundleServerlessFunctions = async (projectStructure) => {
  const { rootFolders, subfolders } = projectStructure.config;
  const filepaths = glob.sync(
    convertToPosixPath(
      path.join(
        rootFolders.source,
        subfolders.serverlessFunctions,
        "**/*.{js,ts}"
      )
    ),
    { nodir: true }
  ).map((f) => path.resolve(f));
  await Promise.allSettled(
    filepaths.map((f) => bundleServerlessFunction(f, projectStructure))
  );
};
const bundleServerlessFunction = async (filepath, projectStructure) => {
  const fmp = new FunctionMetadataParser(filepath, projectStructure);
  const { rootFolders, subfolders, envVarConfig } = projectStructure.config;
  const outdir = path.join(rootFolders.dist, subfolders.serverlessFunctions);
  const { name } = fmp.functionMetadata;
  await esbuild.build({
    entryPoints: [filepath],
    entryNames: `${name}/mod`,
    outExtension: { ".js": ".ts" },
    outdir,
    write: true,
    format: "esm",
    bundle: true,
    loader: COMMON_ESBUILD_LOADERS,
    define: processEnvVariables(envVarConfig.envVarPrefix)
  });
};
const shouldBundleServerlessFunctions = (projectStructure) => {
  const { rootFolders, subfolders } = projectStructure.config;
  return fs.existsSync(
    path.join(rootFolders.source, subfolders.serverlessFunctions)
  );
};
export {
  bundleServerlessFunctions,
  shouldBundleServerlessFunctions
};
