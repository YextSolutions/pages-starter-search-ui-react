import fs from "fs-extra";
import path from "node:path";
import { convertToPosixPath } from "../../../common/src/template/paths.js";
import { glob } from "glob";
import { Path } from "../../../common/src/project/path.js";
const generateManifestFile = async (templateModules, projectStructure) => {
  const featureNameToBundlePath = /* @__PURE__ */ new Map();
  for (const [featureName, module] of templateModules.entries()) {
    featureNameToBundlePath.set(featureName, module.path);
  }
  const distPath = new Path(projectStructure.config.rootFolders.dist);
  const relativeBundlePaths = Array.from(featureNameToBundlePath.entries()).map(
    ([name, path2]) => [name, convertToPosixPath(distPath.getRelativePath(path2))]
  );
  const getAssetBundlePaths = async (assetPath) => {
    const filePaths = glob.sync(
      convertToPosixPath(
        path.resolve(
          projectStructure.config.rootFolders.dist,
          projectStructure.config.subfolders.assets,
          assetPath,
          "**/*.js"
        )
      )
    );
    return filePaths.map((filepath) => [
      path.parse(filepath).name.split(".")[0],
      convertToPosixPath(distPath.getRelativePath(filepath))
    ]);
  };
  let bundlerManifest = Buffer.from("{}");
  if (fs.existsSync(path.join(distPath.path, ".vite", "manifest.json"))) {
    bundlerManifest = fs.readFileSync(
      path.join(distPath.path, ".vite", "manifest.json")
    );
  }
  const manifest = {
    serverPaths: Object.fromEntries(relativeBundlePaths),
    clientPaths: Object.fromEntries(
      await getAssetBundlePaths(projectStructure.config.subfolders.clientBundle)
    ),
    renderPaths: Object.fromEntries(
      await getAssetBundlePaths(projectStructure.config.subfolders.renderBundle)
    ),
    projectStructure: projectStructure.config,
    bundlerManifest: JSON.parse(bundlerManifest.toString())
  };
  writeFile(
    path.resolve(distPath.path, "plugin", "manifest.json"),
    JSON.stringify(manifest, null, "  ")
  );
  fs.remove(path.resolve(distPath.path, "manifest.json"));
};
const writeFile = (filepath, contents) => {
  fs.mkdirSync(path.dirname(filepath), { recursive: true });
  fs.writeFileSync(filepath, contents);
};
export {
  generateManifestFile
};
