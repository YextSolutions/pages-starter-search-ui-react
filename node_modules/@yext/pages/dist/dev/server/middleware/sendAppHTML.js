import { getLang } from "../../../common/src/template/head.js";
import { getContentType } from "./getContentType.js";
import { getGlobalClientServerRenderTemplates } from "../../../common/src/template/internal/getTemplateFilepaths.js";
import {
  getHydrationTemplateDev,
  getServerTemplateDev
} from "../../../common/src/template/hydration.js";
async function sendAppHTML(res, templateModuleInternal, props, vite, pathname, projectStructure) {
  if (templateModuleInternal.render) {
    res.status(200).type(getContentType(templateModuleInternal, props)).end(templateModuleInternal.render(props));
    return;
  }
  const clientServerRenderTemplates = getGlobalClientServerRenderTemplates(
    projectStructure.getTemplatePaths()
  );
  const serverRenderTemplateModule = await vite.ssrLoadModule(
    clientServerRenderTemplates.serverRenderTemplatePath
  );
  const getServerHtml = async () => {
    return await serverRenderTemplateModule.render({
      Page: templateModuleInternal.default,
      pageProps: props
    });
  };
  const headConfig = templateModuleInternal.getHeadConfig ? templateModuleInternal.getHeadConfig(props) : void 0;
  const clientHydrationString = getHydrationTemplateDev(
    clientServerRenderTemplates.clientRenderTemplatePath,
    templateModuleInternal.path,
    props,
    templateModuleInternal.config.hydrate
  );
  const clientInjectedServerHtml = getServerTemplateDev(
    clientHydrationString,
    await getServerHtml(),
    getLang(headConfig, props),
    headConfig
  );
  const html = await vite.transformIndexHtml(
    // vite decodes request urls when caching proxy requests so we have to
    // load the transform request with a decoded uri
    decodeURIComponent(pathname),
    clientInjectedServerHtml
  );
  res.status(200).type(getContentType(templateModuleInternal, props)).end(html);
}
export {
  sendAppHTML as default
};
