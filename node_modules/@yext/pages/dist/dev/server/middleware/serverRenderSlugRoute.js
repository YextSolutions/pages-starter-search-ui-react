import { propsLoader } from "../ssr/propsLoader.js";
import { findTemplateModuleInternal } from "../ssr/findTemplateModuleInternal.js";
import { getTemplateFilepathsFromProjectStructure } from "../../../common/src/template/internal/getTemplateFilepaths.js";
import sendAppHTML from "./sendAppHTML.js";
import { generateTestDataForSlug } from "../ssr/generateTestData.js";
import { getLocalDataForSlug } from "../ssr/getLocalData.js";
import sendStaticPage from "./sendStaticPage.js";
import findMatchingStaticTemplate from "../ssr/findMatchingStaticTemplate.js";
import send404 from "./send404.js";
const serverRenderSlugRoute = ({
  vite,
  dynamicGenerateData,
  projectStructure,
  defaultLocale
}) => async (req, res, next) => {
  try {
    const url = new URL("http://" + req.headers.host + req.originalUrl);
    const locale = req.query.locale?.toString() ?? defaultLocale;
    const slug = decodeURIComponent(url.pathname.substring(1));
    const templateFilepaths = getTemplateFilepathsFromProjectStructure(projectStructure);
    const matchingStaticTemplate = await findMatchingStaticTemplate(vite, slug, templateFilepaths, locale);
    if (matchingStaticTemplate) {
      await sendStaticPage(
        res,
        vite,
        matchingStaticTemplate,
        locale,
        url.pathname,
        projectStructure
      );
      return;
    }
    const document = await getDocument(
      dynamicGenerateData,
      vite,
      slug,
      locale,
      projectStructure
    );
    if (!document) {
      send404(res, `Cannot find document corresponding to slug: ${slug}`);
      return;
    }
    const feature = document.__.name;
    const entityId = document.id;
    const templateModuleInternal = await findTemplateModuleInternal(
      vite,
      async (t) => feature === t.config.name,
      templateFilepaths
    );
    if (!templateModuleInternal) {
      send404(
        res,
        `Cannot find template corresponding to feature: ${feature}`
      );
      return;
    }
    const props = await propsLoader({
      templateModuleInternal,
      entityId,
      locale,
      document
    });
    await sendAppHTML(
      res,
      templateModuleInternal,
      props,
      vite,
      `/${slug}`,
      projectStructure
    );
  } catch (e) {
    next(e);
  }
};
const getDocument = async (dynamicGenerateData, vite, slug, locale, projectStructure) => {
  if (dynamicGenerateData) {
    return generateTestDataForSlug(
      process.stdout,
      vite,
      slug,
      locale,
      projectStructure
    );
  }
  return getLocalDataForSlug({ slug, locale });
};
export {
  serverRenderSlugRoute
};
