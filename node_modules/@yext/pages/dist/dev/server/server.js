import express from "express";
import path from "path";
import fs from "fs";
import { createServer as createViteServer } from "vite";
import { serverRenderRoute } from "./middleware/serverRenderRoute.js";
import { ignoreFavicon } from "./middleware/ignoreFavicon.js";
import { errorMiddleware } from "./middleware/errorMiddleware.js";
import { indexPage } from "./middleware/indexPage.js";
import { generateTestData } from "./ssr/generateTestData.js";
import { ProjectStructure } from "../../common/src/project/structure.js";
import { finalSlashRedirect } from "./middleware/finalSlashRedirect.js";
import { serverRenderSlugRoute } from "./middleware/serverRenderSlugRoute.js";
import { serveHttpFunction } from "./middleware/serveHttpFunction.js";
import { fileURLToPath } from "url";
import { dirname } from "path";
import { getFunctionFilepaths } from "../../common/src/function/internal/getFunctionFilepaths.js";
import { convertFunctionModuleToFunctionModuleInternal } from "../../common/src/function/internal/types.js";
import { loadViteModule } from "./ssr/loadViteModule.js";
import { getViteServerConfig } from "../../common/src/loader/vite.js";
import { logWarning } from "../../util/logError.js";
import { isUsingConfig } from "../../util/config.js";
import yaml from "yaml";
const __dirname = dirname(fileURLToPath(import.meta.url));
const createServer = async (dynamicGenerateData, useProdURLs, devServerPort, scope) => {
  const app = express();
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));
  const projectStructure = await ProjectStructure.init({ scope });
  const defaultLocale = getDefaultLocale(projectStructure);
  const vite = await createViteServer(getViteServerConfig(projectStructure));
  app.use(vite.middlewares);
  app.use("/favicon.ico", (req, res) => {
    res.status(200).header({ "content-type": "image/x-icon" }).sendFile(path.resolve(__dirname, "./public/favicon.ico"));
  });
  app.use(ignoreFavicon);
  app.use(finalSlashRedirect);
  if (dynamicGenerateData) {
    await generateTestData(projectStructure.config.scope);
  }
  const functionModules = /* @__PURE__ */ new Map();
  const loadUpdatedFunctionModules = async () => {
    const functionFilepaths = getFunctionFilepaths(
      path.join(
        projectStructure.config.rootFolders.source,
        projectStructure.config.subfolders.serverlessFunctions
      )
    );
    for (const functionPath of functionFilepaths) {
      const functionModule = await loadViteModule(
        vite,
        path.format(functionPath)
      );
      const functionModuleInternal = convertFunctionModuleToFunctionModuleInternal(
        functionPath,
        functionModule,
        projectStructure
      );
      functionModules.set(
        functionModuleInternal.config.name,
        functionModuleInternal
      );
    }
  };
  await loadUpdatedFunctionModules();
  const functionsAtServerStart = [...functionModules.values()];
  functionsAtServerStart.sort((a, b) => {
    const aContainsParam = a.slug.dev.includes(":");
    const bContainsParam = b.slug.dev.includes(":");
    if (aContainsParam && !bContainsParam)
      return 1;
    if (!aContainsParam && bContainsParam)
      return -1;
    return b.slug.dev.length - a.slug.dev.length;
  });
  if (functionsAtServerStart.length > 0) {
    functionsAtServerStart.forEach((func) => {
      if (func.config.event === "API") {
        app.use("/" + func.slug.dev, (req, res, next) => {
          if (req.baseUrl !== req.originalUrl.split("?")[0]) {
            return next();
          }
          const updatedFunction = functionModules.get(func.config.name);
          if (!updatedFunction) {
            throw new Error(
              "Could not load function with name" + func.config.name
            );
          }
          serveHttpFunction(req, res, next, updatedFunction);
        });
      }
    });
  }
  vite.watcher.on("change", async (filepath) => {
    if (filepath.includes("src/functions")) {
      await loadUpdatedFunctionModules();
    }
  });
  app.use(
    /^\/(.+)/,
    useProdURLs ? serverRenderSlugRoute({
      vite,
      dynamicGenerateData,
      projectStructure,
      defaultLocale
    }) : serverRenderRoute({
      vite,
      dynamicGenerateData,
      projectStructure,
      defaultLocale
    })
  );
  app.use(
    "/",
    indexPage({
      vite,
      dynamicGenerateData,
      useProdURLs,
      projectStructure,
      devServerPort
    })
  );
  app.use(errorMiddleware(vite));
  app.listen(
    devServerPort,
    () => process.stdout.write(`listening on :${devServerPort}
`)
  );
};
const getDefaultLocale = (projectStructure) => {
  try {
    let parsedConfigfile;
    const { config } = projectStructure;
    if (isUsingConfig(config.rootFiles.config, config.scope)) {
      parsedConfigfile = yaml.parseDocument(
        fs.readFileSync(
          path.join(config.scope ?? "", config.rootFiles.config),
          "utf-8"
        )
      );
    } else {
      parsedConfigfile = JSON.parse(
        fs.readFileSync(
          path.resolve(
            projectStructure.getSitesConfigPath().path,
            projectStructure.config.sitesConfigFiles.features
          ),
          "utf-8"
        )
      );
    }
    if (parsedConfigfile.locales && parsedConfigfile.locales.length > 0) {
      return parsedConfigfile.locales[0];
    }
  } catch (e) {
    if (e !== "Error: ENOENT: no such file or directory") {
      logWarning(e);
    }
  }
  return "en";
};
export {
  createServer
};
