import { TemplateProps, Manifest, RenderTemplate } from "../../../../common/src/template/types.js";
import { TemplateModuleInternal } from "../../../../common/src/template/internal/types.js";
import { ProjectStructure } from "../../../../common/src/project/structure.js";
/**
 * @returns an array of template modules matching the document's feature.
 */
export declare const readTemplateModules: (feature: string, manifest: Manifest, projectStructure: ProjectStructure) => Promise<TemplateModuleInternal<any, any>>;
/** The render template information needed by the plugin execution */
export interface PluginRenderTemplates {
    /** The server render module */
    server: RenderTemplate;
    /** The client render relative path */
    client: string;
}
/**
 * Creates a {@link PluginRenderTemplates} based on the {@link Manifest}'s renderPaths.
 * @param manifest
 * @returns
 */
export declare const getPluginRenderTemplates: (manifest: Manifest, projectStructure: ProjectStructure) => Promise<PluginRenderTemplates>;
export type GeneratedPage = {
    path: string;
    content?: string;
    redirects: string[];
};
/**
 * Takes in both a template module and its stream document, processes them, and writes them to disk.
 *
 * @param templateModuleInternal
 * @param templateProps
 * @param pluginRenderTemplates
 * @param manifest
 */
export declare const generateResponses: (templateModuleInternal: TemplateModuleInternal<any, any>, templateProps: TemplateProps, pluginRenderTemplates: PluginRenderTemplates, manifest: Manifest, projectStructure: ProjectStructure) => Promise<GeneratedPage>;
