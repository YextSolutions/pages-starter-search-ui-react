import { FeaturesConfig, FeatureConfig } from "../../common/src/feature/features.js";
import { ProjectStructure } from "../../common/src/project/structure.js";
import { StreamConfig } from "../../common/src/feature/stream.js";
import { TemplateModuleCollection } from "../../common/src/template/loader/loader.js";
/**
 * Loads the templates as modules and generates a templates.json or
 * features.json from the templates.
 */
export declare const createTemplatesJson: (templateFilepaths: string[], projectStructure: ProjectStructure, type: "FEATURES" | "TEMPLATES") => Promise<void>;
/**
 * Generates a templates.json or features.json from the templates.
 */
export declare const createTemplatesJsonFromModule: (templateModules: TemplateModuleCollection, projectStructure: ProjectStructure, type: "FEATURES" | "TEMPLATES") => Promise<void>;
export declare const getTemplatesConfig: (templateModules: TemplateModuleCollection) => FeaturesConfig;
/**
 * Overwrites the "features" and "streams" fields in the feature.json while keeping other fields
 * if the feature.json already exists.
 */
export declare const mergeFeatureJson: (featurePath: string, features: FeatureConfig[], streams: any) => FeaturesConfig;
export declare const pushStreamConfigIfValid: (streams: StreamConfig[], streamConfig: StreamConfig) => void;
