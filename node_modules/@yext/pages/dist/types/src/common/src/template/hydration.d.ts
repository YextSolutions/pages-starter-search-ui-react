import { HeadConfig } from "./head.js";
import { TemplateRenderProps } from "./types.js";
/**
 * Imports the custom hydration template and entrypoint template as modules and calls
 * the render function.
 *
 * Dev has a separate function than {@link getHydrationTemplate} due to how Vite messes
 * with the import.meta.url.
 *
 * Output string is split into two strings. The first part is required for Vite to load in CSS
 * and the second part allows hydration. We want CSS to always load but hydration to be
 * controllable.
 *
 * @param clientRenderTemplatePath the path to the custom client render template
 * @param templateModulePath the path to the template module
 * @param props the {@link TemplateRenderProps}
 * @returns the HTML as a string
 */
export declare const getHydrationTemplateDev: (clientRenderTemplatePath: string, templateModulePath: string, props: TemplateRenderProps, hydrate: boolean) => string;
/**
 * Imports the custom hydration template and entrypoint template as modules and calls
 * the render function.
 *
 * The component paths need to be resolved to the current domain's relative path in order
 * to support reverse proxies.
 *
 * @param clientRenderTemplatePath the path to the custom client render template
 * @param templateModulePath the path to the template module
 * @param props the {@link TemplateRenderProps}
 * @returns the HTML as a string
 */
export declare const getHydrationTemplate: (clientRenderTemplatePath: string, templateModulePath: string, props: TemplateRenderProps) => string;
/**
 * Use for the Vite dev server.
 *
 * @param clientHydrationString
 * @param serverHtml
 * @param appLanguage
 * @param headConfig
 * @returns the server template to render in the Vite dev environment
 */
export declare const getServerTemplateDev: (clientHydrationString: string | undefined, serverHtml: string, appLanguage: string, headConfig?: HeadConfig) => string;
/**
 * Used for the Deno plugin execution context. The major difference between this function
 * and {@link getServerTemplateDev} is that it also injects the CSS import tags which is
 * not required by Vite since those are injected automatically by the Vite dev server.
 *
 * @param clientHydrationString
 * @param serverHtml
 * @param templateFilepath
 * @param bundlerManifest
 * @param relativePrefixToRoot
 * @param appLanguage
 * @param headConfig
 * @returns the server template to render in the Deno plugin execution context when rendering HTML
 */
export declare const getServerTemplatePlugin: (clientHydrationString: string | undefined, serverHtml: string, templateFilepath: string, bundlerManifest: bundlerManifest, appLanguage: string, headConfig?: HeadConfig) => string;
type chunkName = string;
type bundlerManifest = Record<chunkName, ManifestInfo>;
type ManifestInfo = {
    file: string;
    src: string;
    isEntry: boolean;
    imports?: string[];
    css: string[];
};
export {};
