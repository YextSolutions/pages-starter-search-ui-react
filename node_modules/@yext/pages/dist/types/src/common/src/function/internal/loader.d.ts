/// <reference types="node" resolution-mode="require"/>
import path from "node:path";
import { FunctionModuleInternal } from "./types.js";
import { ProjectStructure } from "../../project/structure.js";
/**
 * Loads all functions in the project.
 *
 * @param functionPaths the function filepaths to load as modules
 * @param transpile set to true if the functions need to be transpiled (such as when they are in tsx format)
 * @returns Promise<{@link FunctionModuleCollection}>
 */
export declare const loadFunctionModules: (functionPaths: path.ParsedPath[], transpile: boolean, projectStructure: ProjectStructure) => Promise<FunctionModuleCollection>;
/**
 * A FunctionModuleCollection maps function name to internal function modules
 */
export type FunctionModuleCollection = Map<string, FunctionModuleInternal>;
/**
 * Loads all functions by finding all files under the provided root and then creating
 * FunctionModules for each
 * @param root the directory to check for functions
 * @return Promise<FunctionModuleCollection>
 */
export declare const loadFunctions: (root: string, projectStructure: ProjectStructure) => Promise<FunctionModuleCollection>;
