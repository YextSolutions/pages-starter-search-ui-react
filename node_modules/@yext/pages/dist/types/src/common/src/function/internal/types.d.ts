/// <reference types="node" resolution-mode="require"/>
import path from "path";
import { FunctionModule, FunctionType } from "../types.js";
import { PluginEvent } from "../../ci/ci.js";
import { ProjectStructure } from "../../project/structure.js";
/**
 * A domain representation of a serverless function module. Contains all fields from an imported
 * module as well as metadata about the module used in downstream processing.
 */
export interface FunctionModuleInternal {
    /** The filepath to the serverless function file. */
    filePath: path.ParsedPath;
    /** The exported config function. */
    config: FunctionConfigInternal;
    /** The exported function. */
    default?: FunctionType;
    /** The slugs to host the function at. */
    slug: {
        /** The slug defined by the user. Example: api/user/[id]/profile */
        original: string;
        /** Used for the production build. Example: api/user/{{id}}/profile */
        production: string;
        /** Used for the dev server. Example: api/user/:id/profile */
        dev: string;
    };
}
/**
 * The exported `config` function's definition.
 */
export interface FunctionConfigInternal {
    /** The given name of the serverless function. */
    name: string;
    /** The http event. */
    event: PluginEvent;
    /** The default export's name. */
    functionName: string;
}
/**
 * Converts user-provided function information to an internal module.
 * @param functionFilepath the filepath information for the function
 * @param functionModule the public function module to convert
 */
export declare const convertFunctionModuleToFunctionModuleInternal: (functionFilepath: path.ParsedPath, functionModule: FunctionModule, projectStructure: ProjectStructure) => FunctionModuleInternal;
export declare const convertToPluginEvent: (event: string) => PluginEvent;
