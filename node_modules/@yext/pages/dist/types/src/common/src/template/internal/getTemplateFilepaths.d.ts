import { Path } from "../../project/path.js";
import { ProjectStructure } from "../../project/structure.js";
import { ClientServerRenderTemplates } from "../types.js";
/**
 * Get all the template files in the provided template folder path(s).
 *
 * If there are files that share the same name between the provided
 * template folder paths, only the file found in the first visited path
 * from the list is included.
 *
 * @param paths a list of paths to collect template files from
 * @returns a list of template filepaths
 */
export declare const getTemplateFilepaths: (paths: Path[]) => string[];
export declare const getTemplateFilepathsFromProjectStructure: (projectStructure: ProjectStructure) => string[];
/**
 * Determines the client and server rendering templates to use. It first looks for a _client/server.tsx file in the scoped
 * path. Then looks in the templatesRoot path. Finally, if none exist, defaults to a built-in rendering template that aligns
 * with the originally hardcoded template that was used before this configurable feature was added.
 *
 * This DOES NOT take into account template-level rendering customizability. It only returns the global render templates.
 *
 * @param templatesRootPath the path where the templates live, typically src/templates
 * @param scopedTemplatePath the subfolder path inside templatesRoot to scope to - used in multibrand setups
 */
export declare const getGlobalClientServerRenderTemplates: (templatePaths: Path[]) => ClientServerRenderTemplates;
