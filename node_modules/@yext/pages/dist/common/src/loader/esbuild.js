import esbuild from "esbuild";
import { importFromString } from "module-from-string";
import { pathToFileURL } from "url";
import path from "node:path";
import { processEnvVariables } from "../../../util/processEnvVariables.js";
import { anyFileLoader } from "./anyFileLoader.js";
const COMMON_ESBUILD_LOADERS = {
  ".css": "css",
  ".scss": "css",
  ".ico": "dataurl",
  ".avif": "dataurl",
  ".jpg": "dataurl",
  ".jpeg": "dataurl",
  ".png": "dataurl",
  ".gif": "dataurl",
  ".svg": "dataurl",
  ".webp": "dataurl",
  ".ttf": "dataurl",
  ".woff": "dataurl",
  ".woff2": "dataurl",
  ".otf": "dataurl"
};
const BUILT_IN_ESBUILD_LOADERS = {
  ".js": "js",
  ".mjs": "js",
  ".cjs": "js",
  ".jsx": "jsx",
  ".ts": "ts",
  ".mts": "ts",
  ".cts": "ts",
  ".tsx": "tsx"
};
const TEMP_DIR = ".temp";
const loadModules = async (modulePaths, transpile, projectStructure) => {
  const importedModules = [];
  for (const modulePath of modulePaths) {
    try {
      if (transpile) {
        const buildResult = await esbuild.build({
          entryPoints: [modulePath],
          outdir: TEMP_DIR,
          write: false,
          format: "esm",
          bundle: true,
          loader: COMMON_ESBUILD_LOADERS,
          define: processEnvVariables(
            projectStructure.config.envVarConfig.envVarPrefix
          ),
          plugins: [anyFileLoader()]
        });
        const baseFile = path.parse(modulePath).name + ".js";
        let templateOutputFile;
        for (const outputFile of buildResult.outputFiles) {
          if (path.parse(outputFile.path).base === baseFile) {
            templateOutputFile = outputFile;
            break;
          }
        }
        if (!templateOutputFile) {
          throw new Error(
            `Could not find outputFile in build result for file ${modulePath}.`
          );
        }
        importedModules.push({
          path: modulePath,
          module: await importFromString(templateOutputFile.text)
        });
      } else {
        importedModules.push({
          path: modulePath,
          module: await import(pathToFileURL(modulePath).toString())
        });
      }
    } catch (e) {
      throw new Error(`Could not import ${modulePath} ${e}`);
    }
  }
  return importedModules;
};
export {
  BUILT_IN_ESBUILD_LOADERS,
  COMMON_ESBUILD_LOADERS,
  loadModules
};
