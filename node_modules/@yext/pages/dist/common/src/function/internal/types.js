import path from "path";
import { validateFunctionModule } from "./validateFunctionModule.js";
import { FunctionMetadataParser } from "./functionMetadataParser.js";
const convertFunctionModuleToFunctionModuleInternal = (functionFilepath, functionModule, projectStructure) => {
  const fmp = new FunctionMetadataParser(
    path.format(functionFilepath),
    projectStructure
  );
  const { filepath, name, slug, functionType } = fmp.functionMetadata;
  if (functionType === "http" || functionType === "onUrlChange") {
    validateFunctionModule(functionFilepath.dir, functionModule);
    return {
      default: functionModule.default,
      config: {
        name,
        functionName: "default",
        event: convertToPluginEvent(functionType)
      },
      filePath: path.parse(filepath),
      slug
    };
  } else {
    throw new Error(
      `Cannot load ${path.format(
        functionFilepath
      )}.
All Serverless Functions should live in src/functions/http or src/functions/onUrlChange.`
    );
  }
};
const convertToPluginEvent = (event) => {
  switch (event) {
    case "http":
      return "API";
    case "onUrlChange":
      return "ON_URL_CHANGE";
    default:
      throw new Error(`No matching PluginEvent found for: ${event}`);
  }
};
export {
  convertFunctionModuleToFunctionModuleInternal,
  convertToPluginEvent
};
