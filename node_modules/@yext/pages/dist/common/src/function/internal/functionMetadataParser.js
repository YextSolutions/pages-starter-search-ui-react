import path from "node:path";
import { convertToPosixPath } from "../../template/paths.js";
const validFunctionTypes = ["onUrlChange", "http"];
class FunctionMetadataParser {
  functionMetadata;
  constructor(absolutePathToFunction, projectStructure) {
    const { rootFolders, subfolders } = projectStructure.config;
    const sourcePath = path.join(
      rootFolders.source,
      subfolders.serverlessFunctions
    );
    const distPath = path.join(
      rootFolders.dist,
      subfolders.serverlessFunctions
    );
    const testsPath = path.join("tests", "fixtures", "src", "functions");
    const relativePath = absolutePathToFunction.split(
      `${path.sep}${sourcePath}${path.sep}`
    )[1];
    const functionType = relativePath.split(path.sep)[0];
    if (!validFunctionTypes.find((ft) => ft === functionType)) {
      throw new Error(
        `Cannot load ${absolutePathToFunction}.
All Serverless Functions should live in src/functions/http or src/functions/onUrlChange.`
      );
    }
    let functionsRoot;
    if (absolutePathToFunction.includes(sourcePath)) {
      functionsRoot = sourcePath;
    } else if (absolutePathToFunction.includes(distPath)) {
      functionsRoot = distPath;
    } else if (absolutePathToFunction.includes(testsPath)) {
      functionsRoot = testsPath;
    }
    if (functionType === "onUrlChange" && relativePath.split(path.sep).length > 2 && functionsRoot !== distPath) {
      throw new Error(
        `Cannot load ${absolutePathToFunction}.
Nested directories are not supported for onUrlChange plugins. All functions must be located at the root of src/functions/onUrlChange.`
      );
    }
    const defaultSlug = relativePath.replace(`${functionType}${path.sep}`, "").split(".").slice(0, -1).join(".");
    const devSlug = defaultSlug.replaceAll("[", ":").replaceAll("]", "");
    const prodSlug = defaultSlug.replaceAll("[", "{{").replaceAll("]", "}}");
    const name = path.parse(absolutePathToFunction).name.replaceAll("[", "").replaceAll("]", "") + "-" + unsecureHashPluginName(relativePath);
    this.functionMetadata = {
      filepath: absolutePathToFunction,
      name,
      slug: {
        original: defaultSlug,
        dev: devSlug,
        production: prodSlug
      },
      functionType
    };
  }
}
const unsecureHashPluginName = (input) => {
  const posixPath = convertToPosixPath(input);
  let hash = 0;
  for (let i = 0; i < posixPath.length; i++) {
    const code = posixPath.charCodeAt(i);
    hash = (hash << 5) - hash + code;
    hash = hash & hash;
  }
  return (Math.abs(hash) % 1e5).toLocaleString("en-US", {
    minimumIntegerDigits: 5,
    useGrouping: false
  });
};
export {
  FunctionMetadataParser
};
