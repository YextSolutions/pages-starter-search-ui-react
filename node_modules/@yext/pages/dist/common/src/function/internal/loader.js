import path from "node:path";
import {
  convertFunctionModuleToFunctionModuleInternal
} from "./types.js";
import { getFunctionFilepaths } from "./getFunctionFilepaths.js";
import { loadModules } from "../../loader/vite.js";
const loadFunctionModules = async (functionPaths, transpile, projectStructure) => {
  const functionPathStrings = functionPaths.map(
    (functionPath) => path.format(functionPath)
  );
  const importedModules = await loadModules(
    functionPathStrings,
    transpile,
    projectStructure
  );
  const importedFunctionModules = [];
  for (const importedModule of importedModules) {
    const functionModuleInternal = convertFunctionModuleToFunctionModuleInternal(
      path.parse(importedModule.path),
      importedModule.module,
      projectStructure
    );
    importedFunctionModules.push({
      ...functionModuleInternal
    });
  }
  return importedFunctionModules.reduce((prev, module) => {
    if (prev.has(module.config.name)) {
      throw new Error(
        `Functions must have unique feature names. Found multiple modules with "${module.config.name}"`
      );
    }
    if (prev.has(module.slug)) {
      throw new Error(
        `Functions must have unique slugs. Found multiple modules with "${module.slug}"`
      );
    }
    return prev.set(module.config.name, module);
  }, /* @__PURE__ */ new Map());
};
const loadFunctions = async (root, projectStructure) => {
  const functionFilepaths = getFunctionFilepaths(root);
  return await loadFunctionModules(functionFilepaths, true, projectStructure);
};
export {
  loadFunctionModules,
  loadFunctions
};
