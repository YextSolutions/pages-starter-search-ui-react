import path from "node:path";
import { fileURLToPath } from "node:url";
import { convertToPosixPath } from "../paths.js";
import { existsSync, getReactVersion, globSync } from "./util.js";
const getTemplateFilepaths = (paths) => {
  const templateFilepaths = [];
  const addedFilenames = /* @__PURE__ */ new Set();
  paths.forEach((p) => {
    const filepaths = globSync(
      convertToPosixPath(`${p.getAbsolutePath()}/*.{tsx,jsx,js,ts}`)
    );
    filepaths.filter(
      (f) => f.indexOf(globalClientRenderFilename) === -1 && f.indexOf(globalServerRenderFilename) === -1 && f.indexOf(globalHydrationClientFilename) === -1
    ).forEach((f) => {
      const fileName = path.basename(f);
      if (!addedFilenames.has(fileName)) {
        addedFilenames.add(fileName);
        templateFilepaths.push(f);
      }
    });
  });
  return templateFilepaths;
};
const getTemplateFilepathsFromProjectStructure = (projectStructure) => {
  return getTemplateFilepaths(projectStructure.getTemplatePaths());
};
const globalClientRenderFilename17 = "_client17.tsx";
const globalClientRenderFilename = "_client.tsx";
const globalServerRenderFilename = "_server.tsx";
const globalHydrationClientFilename = ".client";
const getGlobalClientServerRenderTemplates = (templatePaths) => {
  const shouldUseReactRoot = getReactVersion() >= 18;
  const [clientRenderTemplatePath, usingCustomClient] = findGlobalRenderFile(
    templatePaths,
    globalClientRenderFilename,
    shouldUseReactRoot ? globalClientRenderFilename : globalClientRenderFilename17
  );
  const [serverRenderTemplatePath, usingCustomServer] = findGlobalRenderFile(
    templatePaths,
    globalServerRenderFilename,
    globalServerRenderFilename
  );
  return {
    clientRenderTemplatePath,
    serverRenderTemplatePath,
    isCustomRenderTemplate: usingCustomClient || usingCustomServer
  };
};
const findGlobalRenderFile = (templatePaths, globalFilename, defaultFilename) => {
  const pathToGlobalFile = path.join(
    templatePaths[0].getAbsolutePath(),
    globalFilename
  );
  if (existsSync(pathToGlobalFile)) {
    return [pathToGlobalFile, true];
  }
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = path.dirname(__filename);
  return [path.join(__dirname, defaultFilename.split(".")[0] + ".js"), false];
};
export {
  getGlobalClientServerRenderTemplates,
  getTemplateFilepaths,
  getTemplateFilepathsFromProjectStructure
};
