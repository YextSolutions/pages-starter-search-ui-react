import { renderHeadConfigToString } from "./head.js";
import { convertToPosixPath } from "./paths.js";
const getHydrationTemplateDev = (clientRenderTemplatePath, templateModulePath, props, hydrate) => {
  let hydrationTemplate = `
  import {default as Component} from "${convertToPosixPath(
    templateModulePath
  )}";
  `;
  if (hydrate) {
    hydrationTemplate += `
    import {render} from "${convertToPosixPath(clientRenderTemplatePath)}";
    render(
    {
        Page: Component,
        pageProps: ${getPagePropsString(props)},
    }
    );
  `;
  }
  return hydrationTemplate;
};
const getHydrationTemplate = (clientRenderTemplatePath, templateModulePath, props) => {
  const posixModulePath = makeAbsolute(convertToPosixPath(templateModulePath));
  const posixRenderPath = makeAbsolute(
    convertToPosixPath(clientRenderTemplatePath)
  );
  return `
        const componentURL = new URL("${posixModulePath}", import.meta.url)
        const component = await import(componentURL);

        const renderURL = new URL("${posixRenderPath}", import.meta.url)
        const render = await import(renderURL);

        render.render(
        {
            Page: component.default,
            pageProps: ${getPagePropsString(props)},
        }
        );
    `;
};
const getPagePropsString = (props) => {
  return `JSON.parse(decodeURIComponent("${encodeURIComponent(
    JSON.stringify(props)
  )}"))`;
};
const makeAbsolute = (path) => {
  if (!path.startsWith("/")) {
    return "/" + path;
  }
  return path;
};
const getCommonInjectedServerHtml = (clientHydrationString, serverHtml, appLanguage, headConfig) => {
  serverHtml = serverHtml.replace("<!--app-lang-->", appLanguage);
  if (clientHydrationString) {
    serverHtml = injectIntoHead(
      serverHtml,
      `<script type="module">${clientHydrationString}</script>`
    );
  }
  if (headConfig) {
    serverHtml = injectIntoHead(
      serverHtml,
      renderHeadConfigToString(headConfig)
    );
  }
  return serverHtml;
};
const getServerTemplateDev = (clientHydrationString, serverHtml, appLanguage, headConfig) => {
  return getCommonInjectedServerHtml(
    clientHydrationString,
    serverHtml,
    appLanguage,
    headConfig
  );
};
const getServerTemplatePlugin = (clientHydrationString, serverHtml, templateFilepath, bundlerManifest, appLanguage, headConfig) => {
  let html = getCommonInjectedServerHtml(
    clientHydrationString,
    serverHtml,
    appLanguage,
    headConfig
  );
  html = injectIntoHead(html, getCssHtml(templateFilepath, bundlerManifest));
  return html;
};
const getCssHtml = (templateFilepath, bundlerManifest) => {
  return Array.from(getCssTags(templateFilepath, bundlerManifest, /* @__PURE__ */ new Set())).map((f) => `<link rel="stylesheet" href="/${f}"/>`).join("\n");
};
const getCssTags = (filepath, manifest, seen) => {
  const entry = structuredClone(
    Object.entries(manifest).find(([file2]) => file2 === filepath)
  );
  if (!entry) {
    return /* @__PURE__ */ new Set();
  }
  const [file, info] = entry;
  seen.add(file);
  const cssFiles = new Set(info.css);
  (info.imports || []).flatMap((f) => Array.from(getCssTags(f, manifest, seen))).forEach((f) => cssFiles.add(f));
  return cssFiles;
};
const headTag = "<head>";
const injectIntoHead = (html, stringToInject) => {
  let openingHeadIndex = html.indexOf(headTag);
  if (openingHeadIndex === -1) {
    throw new Error("_server.tsx: No head tag is defined");
  }
  openingHeadIndex += headTag.length;
  return html.slice(0, openingHeadIndex) + stringToInject + html.slice(openingHeadIndex);
};
export {
  getHydrationTemplate,
  getHydrationTemplateDev,
  getServerTemplateDev,
  getServerTemplatePlugin
};
